package com.khoipd8.educationchatbot.service;

import com.khoipd8.educationchatbot.entity.StudentScore;
import com.khoipd8.educationchatbot.repository.StudentScoreRepository;
import com.khoipd8.educationchatbot.entity.CombinationScore;
import com.khoipd8.educationchatbot.repository.CombinationScoreRepository;          

import lombok.extern.slf4j.Slf4j;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import io.github.bonigarcia.wdm.WebDriverManager;
import org.openqa.selenium.JavascriptExecutor;


import java.time.Duration;
import java.util.*;

@Service
@Slf4j
public class SeleniumSBDService {
    
    @Autowired
    private StudentScoreRepository studentScoreRepository;
    
    @Autowired
    private CombinationScoreRepository combinationScoreRepository;
    
    /**
     * ü§ñ SELENIUM CRAWL - CH·∫ÆC CH·∫ÆN TH√ÄNH C√îNG
     */
    // S·ª¨A L·∫†I METHOD crawlWithSelenium trong SeleniumSBDService.java

    public Map<String, Object> crawlWithSelenium(String sbd, String region) {
        WebDriver driver = null;
        Map<String, Object> result = new HashMap<>();
        
        try {
            log.info("ü§ñ Starting Selenium crawl for SBD: {}", sbd);
            
            // Setup Chrome driver cho Windows
            WebDriverManager.chromedriver().setup();
            ChromeOptions options = new ChromeOptions();
            
            // C·∫•u h√¨nh cho Windows
            options.addArguments("--headless"); // Ch·∫°y ·∫©n
            options.addArguments("--no-sandbox");
            options.addArguments("--disable-dev-shm-usage");
            options.addArguments("--disable-gpu");
            options.addArguments("--disable-extensions");
            options.addArguments("--lang=vi-VN");
            options.addArguments("--window-size=1920,1080");
            options.addArguments("--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36");
            
            driver = new ChromeDriver(options);
            WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(20));
            
            // Step 1: M·ªü trang
            driver.get("https://diemthi.tuyensinh247.com/xep-hang-thi-thptqg.html");
            log.info("‚úÖ Loaded page: {}", driver.getTitle());
            
            // Wait for page to fully load
            Thread.sleep(3000);
            
            // Step 2: Debug - In ra to√†n b·ªô HTML ƒë·ªÉ xem c·∫•u tr√∫c
            String pageSource = driver.getPageSource();
            log.debug("Page source length: {}", pageSource.length());
            
            // Step 3: T√¨m SBD input v·ªõi nhi·ªÅu c√°ch kh√°c nhau
            WebElement sbdInput = null;
            
            // Th·ª≠ nhi·ªÅu selector kh√°c nhau
            String[] inputSelectors = {
                "input[name='sbd']",
                "input[placeholder*='s·ªë b√°o danh']", 
                "input[placeholder*='S·ªë b√°o danh']",
                "input[placeholder*='SBD']",
                "input[type='text']",
                "input[id*='sbd']",
                "input[class*='sbd']"
            };
            
            for (String selector : inputSelectors) {
                try {
                    sbdInput = wait.until(ExpectedConditions.presenceOfElementLocated(By.cssSelector(selector)));
                    log.info("‚úÖ Found SBD input using selector: {}", selector);
                    break;
                } catch (Exception e) {
                    log.debug("Selector failed: {}", selector);
                }
            }
            
            if (sbdInput == null) {
                log.error("‚ùå Could not find SBD input field");
                result.put("status", "input_not_found");
                result.put("message", "Kh√¥ng t√¨m th·∫•y √¥ nh·∫≠p SBD");
                result.put("page_title", driver.getTitle());
                return result;
            }
            
            // Step 4: Nh·∫≠p SBD
            sbdInput.clear();
            sbdInput.sendKeys(sbd);
            log.info("‚úÖ Entered SBD: {}", sbd);
            
            // Step 5: Ch·ªçn khu v·ª±c (n·∫øu c√≥)
            try {
                WebElement regionSelect = driver.findElement(By.tagName("select"));
                Select select = new Select(regionSelect);
                // Th·ª≠ ch·ªçn theo text
                List<WebElement> regionOptions = select.getOptions();
                for (WebElement option : regionOptions) {
                    String optionText = option.getText();
                    log.debug("Available option: {}", optionText);
                    if (optionText.contains(region) || 
                        optionText.toLowerCase().contains(region.toLowerCase())) {
                        select.selectByVisibleText(optionText);
                        log.info("‚úÖ Selected region: {}", optionText);
                        break;
                    }
                }
            } catch (Exception e) {
                log.debug("No region selector found: {}", e.getMessage());
            }
            
            // Step 6: Submit form b·∫±ng JavaScript
            try {
                ((JavascriptExecutor) driver).executeScript("document.querySelector('form').submit();");
                log.info("‚úÖ Form submitted via JavaScript");
            } catch (Exception e) {
                log.error("‚ùå JavaScript submit failed: {}", e.getMessage());
                result.put("status", "submit_failed");
                result.put("message", "Kh√¥ng th·ªÉ submit form");
                return result;
            }

            // Step 7: ƒê·ª£i k·∫øt qu·∫£ load ƒê·ªòNG - QUAN TR·ªåNG!
            log.info("‚è≥ Waiting for results to load dynamically...");

            WebElement resultsTable = null;
            try {
                // ƒê·ª£i cho table k·∫øt qu·∫£ xu·∫•t hi·ªán (t·ªëi ƒëa 15 gi√¢y)
                resultsTable = wait.until(ExpectedConditions.presenceOfElementLocated(
                    By.cssSelector(".ranking-table.ts247-watermark, table.ranking-table")
                ));
                log.info("‚úÖ Results table appeared!");
                
                // ƒê·ª£i th√™m 2 gi√¢y ƒë·ªÉ data load ho√†n to√†n
                Thread.sleep(2000);
                
            } catch (Exception e) {
                log.warn("‚ö†Ô∏è Main results table not found, trying alternative selectors...");
                
                // Th·ª≠ c√°c selector kh√°c
                String[] alternativeSelectors = {
                    "table[class*='ranking']",
                    "table[class*='ts247']", 
                    "table[class*='watermark']",
                    ".ranking-table",
                    "table tbody tr",
                    "table"
                };
                
                for (String selector : alternativeSelectors) {
                    try {
                        List<WebElement> tables = driver.findElements(By.cssSelector(selector));
                        if (!tables.isEmpty()) {
                            resultsTable = tables.get(0);
                            log.info("‚úÖ Found results using selector: {}", selector);
                            break;
                        }
                    } catch (Exception ignored) {}
                }
            }

            // Step 8: Check for error messages sau khi load
            String currentUrl = driver.getCurrentUrl();
            String newPageSource = driver.getPageSource();
            log.info("üìÑ Page after submit - URL: {}, Source length: {}", currentUrl, newPageSource.length());

            // T√¨m error message trong k·∫øt qu·∫£ ƒë·ªông
            String[] errorTexts = {
                "kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ n√†o ph√π h·ª£p",
                "kh√¥ng t√¨m th·∫•y",
                "kh√¥ng c√≥ d·ªØ li·ªáu", 
                "kh√¥ng c√≥ th√¥ng tin",
                "kh√¥ng c√≥ k·∫øt qu·∫£"
            };

            for (String errorText : errorTexts) {
                if (newPageSource.toLowerCase().contains(errorText.toLowerCase())) {
                    result.put("status", "not_found_on_website");
                    result.put("sbd", sbd);
                    result.put("message", "Website x√°c nh·∫≠n kh√¥ng c√≥ d·ªØ li·ªáu cho SBD: " + sbd);
                    return result;
                }
            }

            // Step 9: Extract scores t·ª´ b·∫£ng k·∫øt qu·∫£ ƒê·ªòNG
            Map<String, Double> scores = extractScoresFromDynamicTable(driver, resultsTable);

            // Debug: In ra ƒëi·ªÉm t√¨m ƒë∆∞·ª£c
            log.info("üìä Scores found from dynamic table: {}", scores);

            if (scores.isEmpty()) {
                // Debug: L∆∞u page source ƒë·ªÉ xem
                log.error("‚ùå No scores found from dynamic table. Analyzing page structure...");
                
                // In ra structure c·ªßa table ƒë·ªÉ debug
                if (resultsTable != null) {
                    try {
                        log.info("üîç Table HTML: {}", resultsTable.getAttribute("outerHTML").substring(0, Math.min(500, resultsTable.getAttribute("outerHTML").length())));
                    } catch (Exception e) {
                        log.debug("Could not get table HTML: {}", e.getMessage());
                    }
                }
                
                result.put("status", "no_scores_found");
                result.put("sbd", sbd);
                result.put("message", "Kh√¥ng t√¨m th·∫•y ƒëi·ªÉm s·ªë trong b·∫£ng k·∫øt qu·∫£");
                result.put("page_preview", newPageSource.length() > 1000 ? 
                        newPageSource.substring(0, 1000) + "..." : newPageSource);
                result.put("table_found", resultsTable != null);
                return result;
            }
            
            // Step 10: Save to database
            StudentScore studentScore = createStudentScoreFromMap(scores, sbd, region);
            studentScore = studentScoreRepository.save(studentScore);
            
            // Step 11: Create combination scores
            List<CombinationScore> combinationScores = createCombinationScoresFromSelenium(driver, studentScore);
            if (!combinationScores.isEmpty()) {
                combinationScoreRepository.saveAll(combinationScores);
            }
            
            // Step 12: Format response
            result = formatCrawledData(studentScore, combinationScores);
            result.put("source", "selenium_crawl");
            result.put("crawl_success", true);
            result.put("scores_found", scores);
            result.put("debug_info", Map.of(
                "page_title", driver.getTitle(),
                "final_url", driver.getCurrentUrl(),
                "scores_extracted", scores.size(),
                "combinations_created", combinationScores.size()
            ));
            
            log.info("üéâ Selenium crawl SUCCESS for SBD: {} - Found {} scores", sbd, scores.size());
            
            return result;
            
        } catch (Exception e) {
            log.error("‚ùå Selenium crawl failed for SBD: {}", sbd, e);
            result.put("status", "selenium_error");
            result.put("sbd", sbd);
            result.put("message", "L·ªói Selenium: " + e.getMessage());
            result.put("error_type", e.getClass().getSimpleName());
            
            // Th√™m th√¥ng tin debug
            if (driver != null) {
                try {
                    result.put("current_url", driver.getCurrentUrl());
                    result.put("page_title", driver.getTitle());
                } catch (Exception ex) {
                    // Ignore
                }
            }
            
            return result;
            
        } finally {
            if (driver != null) {
                try {
                    driver.quit();
                    log.info("‚úÖ Chrome driver closed");
                } catch (Exception e) {
                    log.warn("Warning closing driver: {}", e.getMessage());
                }
            }
        }
    }
    
    /**
     * Extract ƒëi·ªÉm s·ªë t·ª´ page s·ª≠ d·ª•ng Selenium
     */
    private Map<String, Double> extractScoresFromSelenium(WebDriver driver) {
        Map<String, Double> scores = new HashMap<>();
        
        try {
            String pageSource = driver.getPageSource();
            log.debug("Extracting scores from page source length: {}", pageSource.length());
            
            // Pattern 1: T√¨m text patterns nh∆∞ "M√¥n To√°n: 4.75" 
            extractScoresFromPageText(pageSource, scores);
            
            // Pattern 2: T√¨m trong c√°c elements c√≥ th·ªÉ ch·ª©a ƒëi·ªÉm
            extractScoresFromElements(driver, scores);
            
            // Pattern 3: T√¨m trong orange/colored boxes (nh∆∞ screenshot)
            extractScoresFromColoredBoxes(driver, scores);
            
            // Pattern 4: Regex pattern matching tr√™n to√†n b·ªô page
            extractScoresWithRegex(pageSource, scores);
            
            log.info("üìä Total scores extracted: {}", scores.size());
            for (Map.Entry<String, Double> entry : scores.entrySet()) {
                log.info("   {} = {}", entry.getKey(), entry.getValue());
            }
            
        } catch (Exception e) {
            log.error("Error in extractScoresFromSelenium: {}", e.getMessage(), e);
        }
        
        return scores;
    }
    private void extractScoresFromPageText(String pageSource, Map<String, Double> scores) {
        try {
            // Split into lines and look for score patterns
            String[] lines = pageSource.split("\\n");
            
            for (String line : lines) {
                String cleanLine = line.replaceAll("<[^>]*>", "").trim(); // Remove HTML tags
                
                if (cleanLine.toLowerCase().contains("m√¥n") && 
                    cleanLine.matches(".*[0-9]+[\\.,][0-9]+.*")) {
                    
                    extractScoreFromText(cleanLine, scores);
                }
            }
        } catch (Exception e) {
            log.debug("Error extracting from page text: {}", e.getMessage());
        }
    }

    private void extractScoresFromElements(WebDriver driver, Map<String, Double> scores) {
        try {
            // T√¨m t·∫•t c·∫£ elements c√≥ th·ªÉ ch·ª©a ƒëi·ªÉm
            String[] possibleSelectors = {
                "td", "div", "span", "p", "li", 
                ".score", ".result", ".grade", 
                "[class*='diem']", "[class*='score']",
                "[id*='diem']", "[id*='score']"
            };
            
            for (String selector : possibleSelectors) {
                try {
                    List<WebElement> elements = driver.findElements(By.cssSelector(selector));
                    
                    for (WebElement element : elements) {
                        String text = element.getText().trim();
                        if (!text.isEmpty() && 
                            text.toLowerCase().contains("m√¥n") && 
                            text.matches(".*[0-9]+[\\.,][0-9]+.*")) {
                            
                            extractScoreFromText(text, scores);
                        }
                    }
                } catch (Exception e) {
                    log.debug("Selector {} failed: {}", selector, e.getMessage());
                }
            }
        } catch (Exception e) {
            log.debug("Error extracting from elements: {}", e.getMessage());
        }
    }

    private void extractScoresFromColoredBoxes(WebDriver driver, Map<String, Double> scores) {
        try {
            // T√¨m boxes c√≥ background color (nh∆∞ orange box trong screenshot)
            List<WebElement> coloredElements = driver.findElements(
                By.xpath("//*[contains(@style, 'background') or contains(@style, 'color')]")
            );
            
            for (WebElement element : coloredElements) {
                String text = element.getText().trim();
                String style = element.getAttribute("style");
                
                if (!text.isEmpty() && 
                    (style.contains("orange") || style.contains("#f") || style.contains("rgb")) &&
                    text.matches(".*[0-9]+[\\.,][0-9]+.*")) {
                    
                    extractScoreFromText(text, scores);
                }
            }
        } catch (Exception e) {
            log.debug("Error extracting from colored boxes: {}", e.getMessage());
        }
    }
    
    private void extractScoresWithRegex(String pageSource, Map<String, Double> scores) {
        try {
            // Clean HTML t·ª´ page source
            String cleanText = pageSource.replaceAll("<[^>]*>", " ").replaceAll("\\s+", " ");
            
            // Specific patterns cho t·ª´ng m√¥n h·ªçc
            Map<String, String[]> subjectPatterns = new HashMap<>();
            subjectPatterns.put("to√°n", new String[]{"to√°n", "math"});
            subjectPatterns.put("vƒÉn", new String[]{"vƒÉn", "ng·ªØ vƒÉn", "literature"});
            subjectPatterns.put("l√Ω", new String[]{"l√Ω", "v·∫≠t l√≠", "physics"});
            subjectPatterns.put("h√≥a", new String[]{"h√≥a", "h√≥a h·ªçc", "chemistry"});
            subjectPatterns.put("anh", new String[]{"anh", "ti·∫øng anh", "english"});
            subjectPatterns.put("sinh", new String[]{"sinh", "sinh h·ªçc", "biology"});
            subjectPatterns.put("s·ª≠", new String[]{"s·ª≠", "l·ªãch s·ª≠", "history"});
            subjectPatterns.put("ƒë·ªãa", new String[]{"ƒë·ªãa", "ƒë·ªãa l√≠", "geography"});
            
            for (Map.Entry<String, String[]> entry : subjectPatterns.entrySet()) {
                String subject = entry.getKey();
                String[] patterns = entry.getValue();
                
                for (String pattern : patterns) {
                    // Pattern: "M√¥n To√°n: 4.75" ho·∫∑c "To√°n 4.75"
                    String regex = "(?i)(?:m√¥n\\s+)?" + pattern + "\\s*[:\\-]?\\s*([0-9]+[\\.,][0-9]+)";
                    java.util.regex.Pattern p = java.util.regex.Pattern.compile(regex);
                    java.util.regex.Matcher m = p.matcher(cleanText);
                    
                    if (m.find()) {
                        try {
                            String scoreStr = m.group(1).replace(",", ".");
                            double score = Double.parseDouble(scoreStr);
                            if (score >= 0 && score <= 10) {
                                scores.put(subject, score);
                                log.debug("Regex extracted: {} = {}", subject, score);
                                break; // ƒê√£ t√¨m th·∫•y, kh√¥ng c·∫ßn th·ª≠ pattern kh√°c
                            }
                        } catch (NumberFormatException e) {
                            log.debug("Could not parse score: {}", m.group(1));
                        }
                    }
                }
            }
        } catch (Exception e) {
            log.debug("Error in regex extraction: {}", e.getMessage());
        }
    }
    
    // C·∫£i thi·ªán method extractScoreFromText
    private void extractScoreFromText(String text, Map<String, Double> scores) {
        if (text == null || text.trim().isEmpty()) return;
        
        try {
            String lowerText = text.toLowerCase();
            
            // Map c√°c m√¥n h·ªçc
            Map<String, String[]> subjects = new HashMap<>();
            subjects.put("to√°n", new String[]{"to√°n", "math"});
            subjects.put("vƒÉn", new String[]{"vƒÉn", "ng·ªØ vƒÉn", "literature"});
            subjects.put("l√Ω", new String[]{"l√Ω", "v·∫≠t l√≠", "physics"});
            subjects.put("h√≥a", new String[]{"h√≥a", "h√≥a h·ªçc", "chemistry"});
            subjects.put("anh", new String[]{"anh", "ti·∫øng anh", "english"});
            subjects.put("sinh", new String[]{"sinh", "sinh h·ªçc", "biology"});
            subjects.put("s·ª≠", new String[]{"s·ª≠", "l·ªãch s·ª≠", "history"});
            subjects.put("ƒë·ªãa", new String[]{"ƒë·ªãa", "ƒë·ªãa l√≠", "geography"});
            
            for (Map.Entry<String, String[]> entry : subjects.entrySet()) {
                String subjectKey = entry.getKey();
                String[] patterns = entry.getValue();
                
                // Skip n·∫øu ƒë√£ c√≥ ƒëi·ªÉm cho m√¥n n√†y
                if (scores.containsKey(subjectKey)) continue;
                
                for (String pattern : patterns) {
                    if (lowerText.contains(pattern)) {
                        // T√¨m s·ªë sau t√™n m√¥n h·ªçc
                        String regex = pattern + "\\s*[:\\-]?\\s*([0-9]+[\\.,]?[0-9]*)";
                        java.util.regex.Pattern p = java.util.regex.Pattern.compile(regex, java.util.regex.Pattern.CASE_INSENSITIVE);
                        java.util.regex.Matcher m = p.matcher(text);
                        
                        if (m.find()) {
                            try {
                                String scoreStr = m.group(1).replace(",", ".");
                                double score = Double.parseDouble(scoreStr);
                                if (score >= 0 && score <= 10) {
                                    scores.put(subjectKey, score);
                                    log.debug("Text extracted: {} = {} from: {}", subjectKey, score, text.substring(0, Math.min(100, text.length())));
                                    break;
                                }
                            } catch (NumberFormatException e) {
                                log.debug("Could not parse score from: {}", m.group(1));
                            }
                        }
                        break;
                    }
                }
            }
        } catch (Exception e) {
            log.debug("Error in extractScoreFromText: {}", e.getMessage());
        }
    }
    
    // private void extractScoreFromText(String text, Map<String, Double> scores) {
    //     if (text == null || text.trim().isEmpty()) return;
        
    //     // Patterns for Vietnamese subjects
    //     String[][] patterns = {
    //         {"to√°n", "math"},
    //         {"vƒÉn", "literature", "ng·ªØ vƒÉn"},
    //         {"l√Ω", "physics", "v·∫≠t l√≠"},
    //         {"h√≥a", "chemistry", "h√≥a h·ªçc"},
    //         {"anh", "english", "ti·∫øng anh"},
    //         {"sinh", "biology", "sinh h·ªçc"},
    //         {"s·ª≠", "history", "l·ªãch s·ª≠"},
    //         {"ƒë·ªãa", "geography", "ƒë·ªãa l√≠"}
    //     };
        
    //     for (String[] subjectPatterns : patterns) {
    //         for (String pattern : subjectPatterns) {
    //             if (text.toLowerCase().contains(pattern)) {
    //                 // Extract number after subject name
    //                 String regex = pattern + "\\s*[:\\-]?\\s*([0-9]+[\\.,]?[0-9]*)";
    //                 java.util.regex.Pattern p = java.util.regex.Pattern.compile(regex, java.util.regex.Pattern.CASE_INSENSITIVE);
    //                 java.util.regex.Matcher m = p.matcher(text);
    //                 if (m.find()) {
    //                     try {
    //                         String scoreStr = m.group(1).replace(",", ".");
    //                         double score = Double.parseDouble(scoreStr);
    //                         if (score >= 0 && score <= 10) {
    //                             scores.put(subjectPatterns[0], score); // Use primary name
    //                         }
    //                     } catch (NumberFormatException e) {
    //                         // Ignore
    //                     }
    //                 }
    //                 break;
    //             }
    //         }
    //     }
    // }
    
    private void extractAllScoresFromPageSource(String pageSource, Map<String, Double> scores) {
        // Extract t·ª´ page source HTML
        String[] lines = pageSource.split("\n");
        for (String line : lines) {
            if (line.toLowerCase().contains("m√¥n") && 
                line.matches(".*[0-9]+[\\.,][0-9]+.*")) {
                extractScoreFromText(line, scores);
            }
        }
    }
    
    // Helper methods t∆∞∆°ng t·ª± nh∆∞ trong SBDLookupService...
    private StudentScore createStudentScoreFromMap(Map<String, Double> scores, String sbd, String region) {
        StudentScore studentScore = new StudentScore();
        studentScore.setSbd(sbd);
        studentScore.setExamYear(2025);
        studentScore.setRegion(region);
        
        studentScore.setScoreMath(scores.get("to√°n"));
        studentScore.setScoreLiterature(scores.get("vƒÉn"));
        studentScore.setScorePhysics(scores.get("l√Ω"));
        studentScore.setScoreChemistry(scores.get("h√≥a"));
        studentScore.setScoreEnglish(scores.get("anh"));
        studentScore.setScoreBiology(scores.get("sinh"));
        studentScore.setScoreHistory(scores.get("s·ª≠"));
        studentScore.setScoreGeography(scores.get("ƒë·ªãa"));
        
        return studentScore;
    }

    // B·ªî SUNG V√ÄO CU·ªêI FILE SeleniumSBDService.java

    /**
     * T·∫°o combination scores t·ª´ Selenium data
     */
    private List<CombinationScore> createCombinationScoresFromSelenium(WebDriver driver, StudentScore studentScore) {
        List<CombinationScore> combinationScores = new ArrayList<>();
        
        try {
            // Determine eligible combinations from scores
            List<String> eligibleCombinations = determineEligibleCombinations(studentScore);
            
            for (String combCode : eligibleCombinations) {
                try {
                    CombinationScore combScore = new CombinationScore();
                    combScore.setSbd(studentScore.getSbd());
                    combScore.setCombinationCode(combCode);
                    combScore.setCombinationName(getCombinationName(combCode));
                    combScore.setStudentScore(studentScore);
                    combScore.setRegion(studentScore.getRegion());
                    
                    // Calculate total score
                    Double totalScore = calculateCombinationScore(studentScore, combCode);
                    combScore.setTotalScore(totalScore);
                    
                    if (totalScore != null) {
                        // Try to extract ranking from page
                        extractRankingFromSeleniumPage(driver, combScore, combCode);
                        
                        // If no ranking found, estimate
                        if (combScore.getStudentsWithHigherScore() == null) {
                            estimateRankingData(combScore, totalScore, combCode);
                        }
                        
                        combinationScores.add(combScore);
                    }
                    
                } catch (Exception e) {
                    log.debug("Error creating combination score for {}: {}", combCode, e.getMessage());
                }
            }
            
        } catch (Exception e) {
            log.error("Error creating combination scores from Selenium: {}", e.getMessage());
        }
        
        return combinationScores;
    }
    
    /**
     * Extract ranking info t·ª´ Selenium page
     */
    private void extractRankingFromSeleniumPage(WebDriver driver, CombinationScore combScore, String combCode) {
        try {
            // Look for ranking data on page
            List<WebElement> rankingElements = driver.findElements(
                By.xpath("//*[contains(text(), '" + combCode + "')]")
            );
            
            for (WebElement element : rankingElements) {
                String text = element.getText();
                if (text.contains(combCode)) {
                    // Try to extract ranking numbers
                    extractRankingFromText(text, combScore);
                }
            }
            
            // Look for total score display
            List<WebElement> scoreElements = driver.findElements(
                By.xpath("//*[contains(text(), 'ƒêi·ªÉm') or contains(text(), 'ƒëi·ªÉm')]")
            );
            
            for (WebElement element : scoreElements) {
                String text = element.getText();
                if (text.contains(combCode) && text.matches(".*[0-9]+[\\.,][0-9]+.*")) {
                    // Extract score from element
                    extractScoreFromCombinationText(text, combScore);
                }
            }
            
        } catch (Exception e) {
            log.debug("Error extracting ranking from Selenium page: {}", e.getMessage());
        }
    }
    
    private void extractRankingFromText(String text, CombinationScore combScore) {
        try {
            // Pattern: "c√≥ ƒëi·ªÉm b·∫±ng: 618"
            if (text.contains("ƒëi·ªÉm b·∫±ng") || text.contains("c√πng ƒëi·ªÉm")) {
                String pattern = "(?:ƒëi·ªÉm b·∫±ng|c√πng ƒëi·ªÉm)[^0-9]*([0-9.,]+)";
                java.util.regex.Pattern p = java.util.regex.Pattern.compile(pattern);
                java.util.regex.Matcher m = p.matcher(text);
                if (m.find()) {
                    String numberStr = m.group(1).replaceAll("[^0-9]", "");
                    combScore.setStudentsWithSameScore(Integer.parseInt(numberStr));
                }
            }
            
            // Pattern: "ƒëi·ªÉm cao h∆°n: 136.977"
            if (text.contains("cao h∆°n") || text.contains("l·ªõn h∆°n")) {
                String pattern = "(?:cao h∆°n|l·ªõn h∆°n)[^0-9]*([0-9.,]+)";
                java.util.regex.Pattern p = java.util.regex.Pattern.compile(pattern);
                java.util.regex.Matcher m = p.matcher(text);
                if (m.find()) {
                    String numberStr = m.group(1).replaceAll("[^0-9]", "");
                    combScore.setStudentsWithHigherScore(Integer.parseInt(numberStr));
                }
            }
            
            // Pattern: "t·ªïng s·ªë: 162200"
            if (text.contains("t·ªïng s·ªë") || text.contains("trong kh·ªëi")) {
                String pattern = "(?:t·ªïng s·ªë|trong kh·ªëi)[^0-9]*([0-9.,]+)";
                java.util.regex.Pattern p = java.util.regex.Pattern.compile(pattern);
                java.util.regex.Matcher m = p.matcher(text);
                if (m.find()) {
                    String numberStr = m.group(1).replaceAll("[^0-9]", "");
                    combScore.setTotalStudentsInCombination(Integer.parseInt(numberStr));
                }
            }
            
        } catch (Exception e) {
            log.debug("Error extracting ranking from text: {}", e.getMessage());
        }
    }
    
    private void extractScoreFromCombinationText(String text, CombinationScore combScore) {
        try {
            // Extract total score for combination
            String pattern = "([0-9]+[\\.,][0-9]+)\\s*(?:ƒêi·ªÉm|ƒëi·ªÉm)";
            java.util.regex.Pattern p = java.util.regex.Pattern.compile(pattern);
            java.util.regex.Matcher m = p.matcher(text);
            if (m.find()) {
                String scoreStr = m.group(1).replace(",", ".");
                Double score = Double.parseDouble(scoreStr);
                if (combScore.getTotalScore() == null) {
                    combScore.setTotalScore(score);
                }
            }
        } catch (Exception e) {
            log.debug("Error extracting score from combination text: {}", e.getMessage());
        }
    }
    
    // COPY C√ÅC HELPER METHODS T·ª™ SBDLookupService
    
    private List<String> determineEligibleCombinations(StudentScore score) {
        List<String> combinations = new ArrayList<>();
        
        // A00: To√°n, L√Ω, H√≥a
        if (hasScores(score.getScoreMath(), score.getScorePhysics(), score.getScoreChemistry())) {
            combinations.add("A00");
        }
        
        // A01: To√°n, L√Ω, Anh
        if (hasScores(score.getScoreMath(), score.getScorePhysics(), score.getScoreEnglish())) {
            combinations.add("A01");
        }
        
        // B00: To√°n, H√≥a, Sinh
        if (hasScores(score.getScoreMath(), score.getScoreChemistry(), score.getScoreBiology())) {
            combinations.add("B00");
        }
        
        // C00: VƒÉn, S·ª≠, ƒê·ªãa
        if (hasScores(score.getScoreLiterature(), score.getScoreHistory(), score.getScoreGeography())) {
            combinations.add("C00");
        }
        
        // C01: VƒÉn, To√°n, L√Ω
        if (hasScores(score.getScoreLiterature(), score.getScoreMath(), score.getScorePhysics())) {
            combinations.add("C01");
        }
        
        // C02: VƒÉn, To√°n, H√≥a
        if (hasScores(score.getScoreLiterature(), score.getScoreMath(), score.getScoreChemistry())) {
            combinations.add("C02");
        }
        
        // D01: VƒÉn, To√°n, Anh
        if (hasScores(score.getScoreLiterature(), score.getScoreMath(), score.getScoreEnglish())) {
            combinations.add("D01");
        }
        
        // D07: To√°n, H√≥a, Anh
        if (hasScores(score.getScoreMath(), score.getScoreChemistry(), score.getScoreEnglish())) {
            combinations.add("D07");
        }
        
        return combinations;
    }
    
    private boolean hasScores(Double... scores) {
        return Arrays.stream(scores).allMatch(Objects::nonNull);
    }
    
    private String getCombinationName(String combinationCode) {
        switch (combinationCode) {
            case "A00": return "To√°n, V·∫≠t l√≠, H√≥a h·ªçc";
            case "A01": return "To√°n, V·∫≠t l√≠, Ti·∫øng Anh";
            case "B00": return "To√°n, H√≥a h·ªçc, Sinh h·ªçc";
            case "C00": return "Ng·ªØ vƒÉn, L·ªãch s·ª≠, ƒê·ªãa l√≠";
            case "C01": return "Ng·ªØ vƒÉn, To√°n, V·∫≠t l√≠";
            case "C02": return "Ng·ªØ vƒÉn, To√°n, H√≥a h·ªçc";
            case "C05": return "Ng·ªØ vƒÉn, V·∫≠t l√≠, H√≥a h·ªçc";
            case "D01": return "Ng·ªØ vƒÉn, To√°n, Ti·∫øng Anh";
            case "D07": return "To√°n, H√≥a h·ªçc, Ti·∫øng Anh";
            default: return combinationCode;
        }
    }
    
    private Double calculateCombinationScore(StudentScore score, String combCode) {
        switch (combCode) {
            case "A00": // To√°n, L√Ω, H√≥a
                return safeAdd(score.getScoreMath(), score.getScorePhysics(), score.getScoreChemistry());
            case "A01": // To√°n, L√Ω, Anh
                return safeAdd(score.getScoreMath(), score.getScorePhysics(), score.getScoreEnglish());
            case "B00": // To√°n, H√≥a, Sinh
                return safeAdd(score.getScoreMath(), score.getScoreChemistry(), score.getScoreBiology());
            case "C00": // VƒÉn, S·ª≠, ƒê·ªãa
                return safeAdd(score.getScoreLiterature(), score.getScoreHistory(), score.getScoreGeography());
            case "C01": // VƒÉn, To√°n, L√Ω
                return safeAdd(score.getScoreLiterature(), score.getScoreMath(), score.getScorePhysics());
            case "C02": // VƒÉn, To√°n, H√≥a
                return safeAdd(score.getScoreLiterature(), score.getScoreMath(), score.getScoreChemistry());
            case "D01": // VƒÉn, To√°n, Anh
                return safeAdd(score.getScoreLiterature(), score.getScoreMath(), score.getScoreEnglish());
            case "D07": // To√°n, H√≥a, Anh
                return safeAdd(score.getScoreMath(), score.getScoreChemistry(), score.getScoreEnglish());
            default:
                return null;
        }
    }
    
    private Double safeAdd(Double... scores) {
        if (Arrays.stream(scores).anyMatch(Objects::nonNull)) {
            return Arrays.stream(scores)
                    .filter(Objects::nonNull)
                    .mapToDouble(Double::doubleValue)
                    .sum();
        }
        return null;
    }
    
    private void estimateRankingData(CombinationScore combScore, Double totalScore, String combCode) {
        try {
            // Statistical estimation
            double meanScore = getMeanScore(combCode);
            double stdDev = 3.5;
            int totalCandidates = getTotalCandidatesForCombination(combCode);
            
            double zScore = (totalScore - meanScore) / stdDev;
            double percentile = Math.max(0.1, Math.min(99.9, 50 + 34.1 * zScore));
            
            int higherStudents = (int) ((100 - percentile) / 100.0 * totalCandidates);
            
            combScore.setStudentsWithHigherScore(Math.max(0, higherStudents));
            combScore.setTotalStudentsInCombination(totalCandidates);
            combScore.setStudentsWithSameScore((int) (totalCandidates * 0.002));
            combScore.setEquivalentScore2024(totalScore + (Math.random() - 0.5) * 1.0);
            
        } catch (Exception e) {
            log.debug("Error estimating ranking data: {}", e.getMessage());
        }
    }
    
    private double getMeanScore(String combination) {
        switch (combination) {
            case "A00": return 22.5;
            case "A01": return 23.0;
            case "B00": return 21.8;
            case "C00": return 20.5;
            case "C01": return 22.2;
            case "C02": return 21.5;
            case "D01": return 22.8;
            case "D07": return 21.2;
            default: return 21.0;
        }
    }
    
    private int getTotalCandidatesForCombination(String combination) {
        switch (combination) {
            case "A00": return 180000;
            case "A01": return 160000;
            case "B00": return 140000;
            case "C00": return 120000;
            case "C01": return 100000;
            case "C02": return 110000;
            case "D01": return 200000;
            case "D07": return 90000;
            default: return 100000;
        }
    }
    
    /**
     * Format crawled data for response
     */
    private Map<String, Object> formatCrawledData(StudentScore studentScore, List<CombinationScore> combinationScores) {
        Map<String, Object> result = new HashMap<>();
        
        result.put("status", "found");
        result.put("sbd", studentScore.getSbd());
        result.put("exam_year", studentScore.getExamYear());
        result.put("region", studentScore.getRegion());
        
        // Individual subject scores
        Map<String, Object> subjectScores = new HashMap<>();
        subjectScores.put("to√°n", studentScore.getScoreMath());
        subjectScores.put("vƒÉn", studentScore.getScoreLiterature());
        subjectScores.put("l√Ω", studentScore.getScorePhysics());
        subjectScores.put("h√≥a", studentScore.getScoreChemistry());
        subjectScores.put("anh", studentScore.getScoreEnglish());
        subjectScores.put("sinh", studentScore.getScoreBiology());
        subjectScores.put("s·ª≠", studentScore.getScoreHistory());
        subjectScores.put("ƒë·ªãa", studentScore.getScoreGeography());
        result.put("subject_scores", subjectScores);
        
        // Combination analysis
        List<Map<String, Object>> combinationAnalysis = new ArrayList<>();
        for (CombinationScore combScore : combinationScores) {
            Map<String, Object> analysis = new HashMap<>();
            analysis.put("combination_code", combScore.getCombinationCode());
            analysis.put("combination_name", combScore.getCombinationName());
            analysis.put("total_score", combScore.getTotalScore());
            
            Map<String, Object> rankingInfo = new HashMap<>();
            rankingInfo.put("students_with_same_score", combScore.getStudentsWithSameScore());
            rankingInfo.put("students_with_higher_score", combScore.getStudentsWithHigherScore());
            rankingInfo.put("total_students_in_combination", combScore.getTotalStudentsInCombination());
            
            if (combScore.getStudentsWithHigherScore() != null) {
                rankingInfo.put("rank_position", combScore.getStudentsWithHigherScore() + 1);
            }
            
            if (combScore.getTotalStudentsInCombination() != null && combScore.getStudentsWithHigherScore() != null) {
                double percentile = (1.0 - (double) combScore.getStudentsWithHigherScore() / combScore.getTotalStudentsInCombination()) * 100;
                rankingInfo.put("percentile", Math.round(percentile * 100.0) / 100.0);
            }
            
            analysis.put("ranking_info", rankingInfo);
            analysis.put("equivalent_score_2024", combScore.getEquivalentScore2024());
            
            combinationAnalysis.add(analysis);
        }
        result.put("combination_analysis", combinationAnalysis);
        
        return result;
    }

    /**
 * Extract ƒëi·ªÉm s·ªë t·ª´ b·∫£ng k·∫øt qu·∫£ ƒë·ªông
 */
private Map<String, Double> extractScoresFromDynamicTable(WebDriver driver, WebElement resultsTable) {
    Map<String, Double> scores = new HashMap<>();
    
    try {
        if (resultsTable == null) {
            log.warn("‚ö†Ô∏è Results table is null, trying to find scores in page source");
            return extractScoresFromSelenium(driver); // Fallback
        }
        
        log.info("üîç Extracting scores from results table...");
        
        // T√¨m tbody v√† c√°c rows
        List<WebElement> rows = resultsTable.findElements(By.tagName("tr"));
        log.info("üìã Found {} rows in results table", rows.size());
        
        // B·∫Øt ƒë·∫ßu t·ª´ tr th·ª© 3 nh∆∞ b·∫°n n√≥i (index 2)
        for (int i = 2; i < rows.size(); i++) {
            try {
                WebElement row = rows.get(i);
                List<WebElement> cells = row.findElements(By.tagName("td"));
                
                if (cells.size() >= 2) {
                    String cellText = row.getText().trim();
                    log.debug("üìù Row {}: {}", i, cellText);
                    
                    // Extract scores t·ª´ text c·ªßa row
                    extractScoresFromRowText(cellText, scores);
                }
            } catch (Exception e) {
                log.debug("Error processing row {}: {}", i, e.getMessage());
            }
        }
        
        // N·∫øu kh√¥ng t√¨m th·∫•y t·ª´ table rows, th·ª≠ extract t·ª´ to√†n b·ªô table text
        if (scores.isEmpty()) {
            String tableText = resultsTable.getText();
            log.info("üîç Extracting from full table text: {}", 
                    tableText.length() > 200 ? tableText.substring(0, 200) + "..." : tableText);
            extractScoresFromTableText(tableText, scores);
        }
        
        // N·∫øu v·∫´n kh√¥ng c√≥, th·ª≠ t√¨m trong c√°c elements con
        if (scores.isEmpty()) {
            List<WebElement> allElements = resultsTable.findElements(By.xpath(".//*"));
            for (WebElement element : allElements) {
                String text = element.getText().trim();
                if (!text.isEmpty() && text.matches(".*[0-9]+[\\.,][0-9]+.*")) {
                    extractScoresFromRowText(text, scores);
                }
            }
        }
        
    } catch (Exception e) {
        log.error("Error extracting scores from dynamic table: {}", e.getMessage(), e);
    }
    
    log.info("‚úÖ Extracted {} scores from dynamic table: {}", scores.size(), scores);
    return scores;
}

    /**
     * Extract scores t·ª´ text c·ªßa m·ªôt row
     */
    private void extractScoresFromRowText(String rowText, Map<String, Double> scores) {
        if (rowText == null || rowText.trim().isEmpty()) return;
        
        try {
            // T√¨m patterns nh∆∞ "M√¥n To√°n: 4.75" trong row text
            String lowerText = rowText.toLowerCase();
            
            // Patterns d·ª±a tr√™n screenshot: "M√¥n To√°n: 4.75"
            String[] subjectPatterns = {
                "m√¥n to√°n", "to√°n", 
                "m√¥n vƒÉn", "vƒÉn", "ng·ªØ vƒÉn",
                "m√¥n l√Ω", "l√Ω", "v·∫≠t l√≠", "v·∫≠t l√≠", 
                "m√¥n h√≥a", "h√≥a", "h√≥a h·ªçc",
                "m√¥n anh", "anh", "ti·∫øng anh",
                "m√¥n sinh", "sinh", "sinh h·ªçc", 
                "m√¥n s·ª≠", "s·ª≠", "l·ªãch s·ª≠",
                "m√¥n ƒë·ªãa", "ƒë·ªãa", "ƒë·ªãa l√≠"
            };
            
            for (String pattern : subjectPatterns) {
                if (lowerText.contains(pattern)) {
                    // T√¨m s·ªë sau pattern
                    String regex = pattern.replace(" ", "\\s*") + "\\s*[:\\-]?\\s*([0-9]+[\\.,]?[0-9]*)";
                    java.util.regex.Pattern p = java.util.regex.Pattern.compile(regex, java.util.regex.Pattern.CASE_INSENSITIVE);
                    java.util.regex.Matcher m = p.matcher(rowText);
                    
                    if (m.find()) {
                        try {
                            String scoreStr = m.group(1).replace(",", ".");
                            double score = Double.parseDouble(scoreStr);
                            if (score >= 0 && score <= 10) {
                                // Map to standard subject names
                                String subjectKey = mapToSubjectKey(pattern);
                                if (subjectKey != null && !scores.containsKey(subjectKey)) {
                                    scores.put(subjectKey, score);
                                    log.debug("‚úÖ Found score: {} = {}", subjectKey, score);
                                }
                            }
                        } catch (NumberFormatException e) {
                            log.debug("Could not parse score: {}", m.group(1));
                        }
                    }
                    break; // ƒê√£ x·ª≠ l√Ω pattern n√†y, chuy·ªÉn sang row kh√°c
                }
            }
        } catch (Exception e) {
            log.debug("Error extracting from row text: {}", e.getMessage());
        }
    }

    /**
     * Extract scores t·ª´ to√†n b·ªô table text
     */
    private void extractScoresFromTableText(String tableText, Map<String, Double> scores) {
        // Split th√†nh lines v√† extract
        String[] lines = tableText.split("\\n");
        for (String line : lines) {
            if (line.toLowerCase().contains("m√¥n") && line.matches(".*[0-9]+[\\.,][0-9]+.*")) {
                extractScoresFromRowText(line, scores);
            }
        }
    }

    /**
     * Map pattern to standard subject key
     */
    private String mapToSubjectKey(String pattern) {
        String lowerPattern = pattern.toLowerCase();
        
        if (lowerPattern.contains("to√°n")) return "to√°n";
        if (lowerPattern.contains("vƒÉn")) return "vƒÉn";
        if (lowerPattern.contains("l√Ω")) return "l√Ω";
        if (lowerPattern.contains("h√≥a")) return "h√≥a";
        if (lowerPattern.contains("anh")) return "anh";
        if (lowerPattern.contains("sinh")) return "sinh";
        if (lowerPattern.contains("s·ª≠")) return "s·ª≠";
        if (lowerPattern.contains("ƒë·ªãa")) return "ƒë·ªãa";
        
        return null;
    }

}       